{
  "hash": "47eee6d04195ee79aa8e703e2b6bc0ea",
  "result": {
    "markdown": "---\ntitle: \"Programmatically generate tabs in Rmarkdown\"\ndescription: |\n  A walk-though for writing code that writes it's own code.\nauthor:\n  - name: Jonathan Jayes\n    url:\n      interludeone.com: {}\ndate: 2022-03-04\nimage: \"https://raw.githubusercontent.com/j-jayes/Monday-Munch/main/images/cover.jpg\"\noutput:\n  distill::distill_article:\n    self_contained: false\n    code_folding: false\n    highlight: haddock\n    highlight_downlit: true\n    toc: true\n---\n\n\n\n\n*Thank you to Adam A. Kemberling for providing some useful feedback on how to explain the panelset syntax and suggesting the use of dplyr::walk() instead of a for loop. His suggestion is [here](https://github.com/j-jayes/jjayes_distill/issues/1#issuecomment-1131681972).*\n\n## Purpose\n\nI want to create a parametrized report in Rmarkdown. The report is populated after querying a database. In short, the Rmarkdown document **must have a tab for each category of a categorical variable**, and draw a ggplot in the tab. The number of categories depends on the result of the query.\n\nWe can simulate the problem by removing one of the islands from the `palmerpenguins` dataset:\n\nThere are three islands:\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n:::\n\n::: {.cell-output-display}\n|Island name | Number of penguins|\n|:-----------|------------------:|\n|Biscoe      |                168|\n|Dream       |                124|\n|Torgersen   |                 52|\n:::\n:::\n\n\nWe will subset the data to choose only two islands:\n\n\n::: {.cell code_folding='true'}\n\n```{.r .cell-code}\ndf <- palmerpenguins::penguins %>% \n    filter(island != \"Biscoe\")\n\ndf %>%\n  distinct(island) %>%\n  knitr::kable(col.names = c(\"Remaining islands\"))\n```\n\n::: {.cell-output-display}\n|Remaining islands |\n|:-----------------|\n|Torgersen         |\n|Dream             |\n:::\n:::\n\n\n## Problem\n\nIf I hardcode the number of tabs one of the plots is drawn but has no data!\n\n\n\n\n\n::::: {.panelset}\n\n::: {.panel}\n\n## Biscoe {.panel-name}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_penguins(\"Biscoe\")\n```\n\n::: {.cell-output-display}\n![](programmatically-generate-tabs-in-rmarkdown_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n::: \n\n::: {.panel}\n\n### Dream {.panel-name}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_penguins(\"Dream\")\n```\n\n::: {.cell-output-display}\n![](programmatically-generate-tabs-in-rmarkdown_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n::: \n\n::: {.panel}\n\n### Torgersen {.panel-name}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_penguins(\"Torgersen\")\n```\n\n::: {.cell-output-display}\n![](programmatically-generate-tabs-in-rmarkdown_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n:::\n\n:::::\n\n\n### Bad solution\n\nI could amend my `plot_penguins` function to display nothing if there is no data to plot:\n\n\n::: {.cell code_folding='true'}\n\n```{.r .cell-code}\nplot_penguins <- function(isl) {\n  if (dim(df %>% filter(island == isl))[1] != 0) { #<<\n    df %>%\n      filter(island == isl) %>%\n      ggplot(aes(bill_length_mm, bill_depth_mm, colour = body_mass_g,\n        shape = species)) +\n      geom_point(cex = 2) +\n      geom_smooth(method = \"lm\", se = F) +\n      scale_color_viridis_c(labels = scales::number_format()) +\n      labs(\n        x = \"Bill length (mm)\",\n        y = \"Bill depth (mm)\",\n        colour = \"Body mass (g)\",\n        shape = \"Penguin species\"\n      )\n  } #<<\n}\n```\n:::\n\n\n\n::::: {.panelset}\n\n::: {.panel}\n\n## Biscoe {.panel-name}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_penguins(\"Biscoe\")\n```\n:::\n\n\n::: \n\n::: {.panel}\n\n### Dream {.panel-name}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_penguins(\"Dream\")\n```\n\n::: {.cell-output-display}\n![](programmatically-generate-tabs-in-rmarkdown_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n::: \n\n::: {.panel}\n\n### Torgersen {.panel-name}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_penguins(\"Torgersen\")\n```\n\n::: {.cell-output-display}\n![](programmatically-generate-tabs-in-rmarkdown_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n:::\n\n:::::\n\nThis is a poor solution. In the case where there are only a small number of possible categories, it works. However, if there are many potential tab names and many are empty, having to click through and find content is not pleasing at all!\n\n## Better solution\n\nA better solution is to generate the tabs programmatically, with code that writes itself depending on the contents of the returned dataset.\n\nI am creating the tabs with [Garrick Aden-Buie's](https://www.garrickadenbuie.com/) `xaringanExtra` package. Have a look at the specifics in the presentation below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_url(\"https://pkg.garrickadenbuie.com/xaringanExtra/panelset/?panelset=r-code#2\")\n```\n\n<iframe src=\"https://pkg.garrickadenbuie.com/xaringanExtra/panelset/?panelset=r-code#2\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\nOther useful resources incude [this Science Loft post](https://scienceloft.com/technical/programmatically-create-new-headings-and-outputs-in-rmarkdown/) and [this Stack Overflow question](https://stackoverflow.com/questions/63397427/programmatically-create-tab-and-plot-in-markdown).\n\n### Tools\n\nIn vanilla Rmarkdown you can create the tabs with a simple heading structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Here are the penguins {.panelset} \n\n### Biscoe\nplot_penguins(\"Biscoe\")\n### Dream\nplot_penguins(\"Dream\")\n```\n:::\n\n\nI opt to use [Pandoc's fenced div structure](https://pandoc.org/MANUAL.html#extension-fenced_divs) instead, to avoid inadvertently creating additional tabs with a third level heading. It looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n::::: {.panelset}\n\n::: {.panel}\n\n[Biscoe]{.panel-name}\n\nplot_penguins(\"Biscoe\")\n:::\n    \n::: {.panel}\n\n[Dream]{.panel-name}\n\nplot_penguins(\"Dream\")\n\n:::\n\n:::::\n```\n:::\n\n\nIt is worth highlighting that the tabset\n\n- begins with `::::: {.panelset}` and,\n- ends with five colons `:::::`\n\nEach individual tab needs to\n\n- open with `::: {.panel}`, \n- include a `[Panel name specified here]{.panel-name}`, and \n- close with three colons `:::`\n\n## How does it work?\n\nNow I can programmatically create my tabs and plots within the fences. I start with a function that makes the tabs. Then I open the tabset, get a list of the islands present, and walk across each one applying my `make_tab` function before closing the tabset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_tab <- function(isl) {         # function to make the tabs\n  cat(\"::: {.panel}\\n\")             # Open tab\n  cat(\"##\", isl, \"{.panel-name}\\n\") # Label tab\n  p <- plot_penguins(isl)           # Create plot\n  print(p)                          # Display plot\n  cat(\"\\n\")                         # Space\n  cat(\":::\\n\")                      # Close tab\n}\n\n::::: {.panelset}\n\nisl_list <- unique(df$island) %>%   # Get a list of islands present in the dataset\n    as.character()\n\ndplyr::walk(isl_list, make_tab)     # make the tabs for each island that is there\n\n:::::\n```\n:::\n\n\n\n### Good to remember\n\n- Wrap code you want executed in `cat()`, and `print()` your ggplot objects.\n\n- Set code options to `results = 'asis'` for the code chunk that makes your tabs. According to the [Rmarkdown Cookbook](https://bookdown.org/yihui/rmarkdown-cookbook/results-asis.html): \n\n<blockquote> \nThis option tells knitr not to wrap your text output in verbatim code blocks, but treat it “as is.” This can be particularly useful when you want to generate content dynamically from R code.\n</blockquote>\n\n- Put in lots of line breaks to separate Rmarkdown content, e.g. frequent uses of `cat(\"\\n\")` between elements.\n\n## Does it work?\n\nYes! Look at that, just two tabs and no empty plots!\n\n\n::: {.cell}\n\n:::\n\n\n::::: {.panelset}\n\n\n\n```{.r .cell-code}\nisl_list <- unique(df$island) %>% as.character()\n\nwalk(isl_list, make_tab)\n```\n\n::: {.panel}\n## Torgersen {.panel-name}\n::: {.cell-output-display}\n![](programmatically-generate-tabs-in-rmarkdown_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n\n:::\n::: {.panel}\n## Dream {.panel-name}\n::: {.cell-output-display}\n![](programmatically-generate-tabs-in-rmarkdown_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n\n\n:::\n\n\n:::::\n\nI hope that this was useful. Please create an issue on Github if you have any suggestions.\n\n## Postscript {.appendix}\n\nThis is the function that plots the figures:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_penguins <- function(isl) {\n  df %>%\n    filter(island == isl) %>%\n    ggplot(aes(bill_length_mm, \n               bill_depth_mm, \n               colour = body_mass_g, \n               shape = species)) +\n    geom_point(cex = 2) +\n    geom_smooth(method = \"lm\", se = F) +\n    scale_color_viridis_c(labels = scales::number_format()) +\n    labs(\n      x = \"Bill length (mm)\",\n      y = \"Bill depth (mm)\",\n      colour = \"Body mass (g)\",\n      shape = \"Penguin species\"\n    )\n}\n```\n:::\n",
    "supporting": [
      "programmatically-generate-tabs-in-rmarkdown_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/panelset-0.2.6/panelset.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/panelset-0.2.6/panelset.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}