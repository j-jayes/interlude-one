---
title: "Map matching"
---

```{r}
library(tidyverse)
library(sf)
theme_set(theme_light())
```

## Purpose

Match coordinates of cities from an excel sheet to NUTS2 regions and then create a time series.

```{r}
df <- readxl::read_excel(here::here("posts", 
                                    "2023-02-01-map-matching", 
                                    "data", 
                                    "European urban population, 700 - 2000.xlsx")) %>% 
  janitor::clean_names()

cities <- df %>% 
  distinct(city, country, latitude_in_degrees, longitude_in_degrees)

# Filter for reasonable coordinates and correct countries
cities_filtered <- cities %>%
  filter(
    between(longitude_in_degrees, -90, 90),
    between(latitude_in_degrees, -90, 90),
    country %in% c(
      "Austria",
      "Belgium",
      "Denmark",
      "Finland",
      "France",
      "Germany",
      "Ireland",
      "Italy",
      "Luxembourg",
      "Netherlands",
      "Norway",
      "Portugal",
      "Spain",
      "Sweden",
      "Switzerland",
      "UK"
    )
  )

cities_filtered
```

```{r}
cities_wgs_84 <- st_as_sf(cities_filtered, coords = c("longitude_in_degrees", "latitude_in_degrees"), 
                 crs = 4326)
# find bounding box
cities_wgs_84 %>% 
  st_bbox()
```

Here is where our points are on a world map.

```{r}
library(rnaturalearth)

world <- ne_countries(scale = "medium", returnclass = "sf", continent = c("europe", "africa", "asia"))

world <- world %>%
  as_tibble() %>%
  st_sf()

ggplot() +
  geom_sf(data = world, aes(geometry = geometry)) +
  geom_sf(data = cities_wgs_84, aes(geometry = geometry, colour = country), alpha = .5) +
  coord_sf(xlim = c(-25.67, 60), ylim = c(28.10, 68.97)) +
  theme(legend.position = "none")
```

### Does it intersect with a NUTS2 region?

We get the map file for the NUTS 2 region [here](https://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units/nuts).

```{r}
nuts_map <- read_rds(here::here("posts", "2023-02-01-map-matching", "data", "map_simple.rds"))

# transform to WGS 84
nuts_map_wgs_84 <- nuts_map %>% 
  st_as_sf() %>% 
  st_transform(4326)
```

Let's now plot the points on our NUTS2 map.

```{r}
ggplot() +
  geom_sf(data = nuts_map_wgs_84) +
  geom_sf(data = cities_wgs_84, aes(geometry = geometry, colour = country), alpha = .5) +
  theme(legend.position = "none")
```

Now we want to write a function to look through our points and find if they intersect with a polygon in our NUTS 2 regions.

```{r}
nuts_index <- nuts_map_wgs_84 %>%
  mutate(rn = row_number()) %>%
  as_tibble() %>%
  select(nuts_code, rn)

get_intersection_number <- function(geom) {
  message("Getting geometry for ", geom)
  number_listed <- geom %>%
    st_intersects(nuts_map_wgs_84)

  number <- number_listed %>% unlist()
  
  return(number)
}

cities_wgs_84_nuts_match <- cities_wgs_84 %>% 
  mutate(nuts_index_number = map(geometry, possibly(get_intersection_number, "failed")))

cities_out_1 <- cities_wgs_84_nuts_match %>% 
  unnest(nuts_index_number) %>% 
  left_join(nuts_index, by = c("nuts_index_number" = "rn")) %>% 
  rename(nin_1 = nuts_index_number,
         nuts_code_1 = nuts_code)

# Save out first pass
cities_out_1 %>% 
  write_rds(here::here("posts", "2023-02-01-map-matching", "data", "cities_out_1.rds"))
```


This process works mostly well. We get 1,598 matches of our 1,657 points.

Who don't we get on this first pass?? We miss 59 places, many in Italy, followed by France.

```{r}
missed_pass_1 <- cities_wgs_84 %>% as_tibble() %>% 
  anti_join(cities_out_1)

missed_pass_1

missed_pass_1 %>% 
  count(country, sort = T)
```

Where are the ones that remain? All along the coast.

```{r}
ggplot() +
  geom_sf(data = nuts_map_wgs_84) +
  geom_sf(data = missed_pass_1, aes(geometry = geometry, colour = country), alpha = .5) 

```

For the remainders, we have a problem. If the point is a city on the coast, it can potentially not intersect with our polygon. For example, Aberdeen is in the sea according to our base map.

```{r}
ggplot() +
  geom_sf(data = nuts_map_wgs_84) +
  geom_sf(
    data = cities_wgs_84 %>%
      filter(city == "Aberdeen"),
    aes(geometry = geometry, colour = country)
  ) +
  geom_sf_label(
    data = cities_wgs_84 %>%
      filter(city == "Aberdeen"),
    aes(geometry = geometry, label = city),
    hjust = -.5
  ) +
  theme(legend.position = "none") +
  coord_sf(xlim = c(-2.09, -2.05), ylim = c(57.15, 57.19))
```

One solution would be to try and find a new shapefile that has more exact borders.

We try that below.

```{r}
nuts_map_hi_res <- st_read(here::here("posts", "2023-02-01-map-matching", "data", "NUTS_RG_20M_2016_4326.shp")) %>% 
  as_tibble() %>% 
  janitor::clean_names() %>% 
  st_as_sf() %>% 
  st_transform(4326) %>% 
  filter(levl_code == 2)
```

This might actually work! Aberdeen is now within the polygon and no longer in the sea.

```{r}
ggplot() +
  geom_sf(data = nuts_map_hi_res) +
  geom_sf(
    data = cities_wgs_84 %>%
      filter(city == "Aberdeen"),
    aes(geometry = geometry, colour = country),
    alpha = .5
  ) +
  geom_sf_label(
    data = cities_wgs_84 %>%
      filter(city == "Aberdeen"),
    aes(geometry = geometry, label = city),
    hjust = -.5
  ) +
  theme(legend.position = "none") +
  coord_sf(xlim = c(-2.09, -2.05), ylim = c(57.15, 57.19))
```


```{r}
nuts_index_2nd_pass <- nuts_map_hi_res %>%
  mutate(rn = row_number()) %>%
  as_tibble() %>%
  select(nuts_id, rn)

get_intersection_number_2nd_pass <- function(geom) {
  message("Getting geometry for ", geom)
  number_listed <- geom %>%
    st_intersects(nuts_map_hi_res)

  number <- number_listed %>% unlist()
  
  return(number)
}

cities_wgs_84_nuts_match_2nd_pass <- missed_pass_1 %>% 
  mutate(nuts_index_number = map(geometry, possibly(get_intersection_number_2nd_pass, "failed")))

cities_out_2 <- cities_wgs_84_nuts_match_2nd_pass %>%
  unnest(nuts_index_number) %>%
  left_join(nuts_index_2nd_pass, by = c("nuts_index_number" = "rn")) %>%
  rename(
    nin_2 = nuts_index_number,
    nuts_code_2 = nuts_id
  )

# Save out second pass
cities_out_2 %>% 
  write_rds(here::here("posts", "2023-02-01-map-matching", "data", "cities_out_2.rds"))
```

For the 43 that remain, we can try finding the closest polygon to the point. That should work!

```{r}
missed_pass_2 <- missed_pass_1 %>% 
  anti_join(cities_out_2)

missed_pass_2
```

```{r}
test_point <- missed_pass_2 %>% 
  head(1) %>% 
  st_as_sf() %>% 
  st_transform(crs = 4326)

nuts_map_wgs_84 %>%
  st_distance(test_point) %>%
  as_tibble() %>%
  mutate(rn = row_number()) %>%
  arrange(value)

# This works!
ggplot() +
  geom_sf(data = nuts_map_wgs_84 %>%
    filter(row_number() == 67)) +
  geom_sf(data = test_point)
```


```{r}
# Function to find closest polygon
nuts_index <- nuts_map_wgs_84 %>%
  mutate(rn = row_number()) %>%
  as_tibble() %>%
  select(nuts_code, rn)

get_closest_polygon_code <- function(geom) {
  message("Getting closest polygon from ", geom)
  row_number <- nuts_map_wgs_84 %>%
    st_distance(geom) %>%
    as_tibble() %>%
    mutate(rn = row_number()) %>%
    arrange(value) %>%
    head(1) %>%
    pull(rn)

  code_out <- nuts_index %>%
    filter(rn == row_number) %>%
    pull(nuts_code)

  return(code_out)
}

cities_out_3 <- missed_pass_2 %>%
  mutate(now_num = row_number()) %>%
  st_as_sf() %>% 
  nest(-now_num) %>%
  mutate(nuts_code = map(data, possibly(get_closest_polygon_code, "failed")))

cities_out_3 <- cities_out_3 %>%
  unnest(nuts_code) %>%
  unnest(data) %>% 
  rename(
    nin_1 = now_num,
    nuts_code_1 = nuts_code
  )

cities_out_3 %>%
  write_rds(here::here(
    "posts",
    "2023-02-01-map-matching",
    "data",
    "cities_out_3.rds"
  ))
```


### Now combine all of these three files

The last thing we need to do is harmonize the code naming between the NUTS 2 file and the Roses Wolf database. 

```{r}
cities_out <- list.files(path = here::here(
    "posts",
    "2023-02-01-map-matching",
    "data"
  ), pattern = "cities_out_[0-9].rds", full.names = T) %>% 
  map_df(read_rds)

cities_out <- cities_out %>%
  mutate(nuts_code = case_when(
    is.na(nuts_code_1) ~ nuts_code_2,
    TRUE ~ nuts_code_1
  )) %>%
  select(city, country, nuts_code)

cities_out %>% 
  filter(str_detect(nuts_code, "\\+"))
```

In the Roses and Wolf database, there are some regions that have a plus sign in the NUTS code, and some which do not. I don't know why this is, but we will use the same format.

The ones that do have a plus are:

UKC+UKD 
ITH1+ITH2 
BE10+BE24+BE31
UKH+UKJ 

I change the ones which replace the plus below:

```{r}
cities_out <- cities_out %>% 
  mutate(nuts_code =
           case_when(nuts_code == "AT12+AT13" ~ "AT123",
                     nuts_code == "DE71+DE72" ~ "DE712",
                     nuts_code == "DE91+DE92" ~ "DE912",
                     TRUE ~ nuts_code))

```

### Calculate inhabitants by year

```{r}
df_cities <- df %>% 
  inner_join(cities_out)

df_nuts_2_population <- df_cities %>% 
  group_by(year, nuts_code) %>% 
  mutate(total_pop = sum(inhabitants_in_000_s, na.rm = T) * 1000,
            total_cities = n()) %>% 
  ungroup()

df_nuts_2_population_short <- df_cities %>% 
  group_by(year, nuts_code) %>% 
  summarise(total_pop = sum(inhabitants_in_000_s, na.rm = T) * 1000,
            total_cities = n()) %>% 
  ungroup()
```


```{r}
df_nuts_2_population %>%
  mutate(nuts_code = str_c("'", nuts_code)) %>%
  write_excel_csv2(here::here(
    "posts",
    "2023-02-01-map-matching",
    "data",
    "European-urban-population_nuts_2.csv"
  ))

df_nuts_2_population_short %>% 
  mutate(nuts_code = str_c("'", nuts_code)) %>% 
    write_excel_csv2(here::here(
    "posts",
    "2023-02-01-map-matching",
    "data",
    "NUTS_2_populations_by_european_cities.csv"
  ))
```


EDA

```{r}
sample_of_regions <- df_nuts_2_population %>% 
  distinct(nuts_code) %>% 
  slice_sample(n = 10)

df_nuts_2_population %>% 
  filter(nuts_code %in% sample_of_regions$nuts_code) %>% 
  ggplot(aes(year, total_pop, colour = nuts_code)) +
  geom_point() +
  geom_line()
```


